// ==========================================================================
//
// File      : window-font.hpp
// Part of   : IPASS: Matrix window library with MAX7219 implementation
// Copyright : Justin.van.ziel@gmail.com 2019
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// ==========================================================================
/// @file

#ifndef WINDOW_FONT_HPP
#define WINDOW_FONT_HPP

#include "window-image.hpp"


/// Window font class defines a font for the window class
//
/// This class defines a total of 128 window_images.
/// Each window image is defined with 8 uint8_t hex codes.
//
/// The font can be accessed with the operator[].
/// When a character is given, the class will return a corresponding window image.
//
/// This font is inspired by the hwlib's font class.
/// Link to file: https://github.com/wovo/hwlib/blob/master/library/graphics/hwlib-graphics-font.hpp

class window_font {

private:
    const window_image images[ 128 ] = {
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0000   
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0001
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0002
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0003
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0004
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0005
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0006
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0007
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0008
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0009
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000A
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000B
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000C
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000D
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000E
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000F
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0010
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0011
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0012
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0013
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0014
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0015
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0016
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0017
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0018
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0019
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001A
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001B
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001C
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001D
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001E
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001F
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0020 ( )
        window_image( 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00 ), // U+0021 (!)
        window_image( 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0022 (")
        window_image( 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00 ), // U+0023 (#)
        window_image( 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00 ), // U+0024 ($)
        window_image( 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00 ), // U+0025 (%)
        window_image( 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00 ), // U+0026 (&)
        window_image( 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0027 (')
        window_image( 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00 ), // U+0028 (()
        window_image( 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00 ), // U+0029 ())
        window_image( 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00 ), // U+002A (*)
        window_image( 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00 ), // U+002B (+)
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06 ), // U+002C (,)
        window_image( 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00 ), // U+002D (-)
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00 ), // U+002E (.)
        window_image( 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 ), // U+002F (/)
        window_image( 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00 ), // U+0030 (0)
        window_image( 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00 ), // U+0031 (1)
        window_image( 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00 ), // U+0032 (2)
        window_image( 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00 ), // U+0033 (3)
        window_image( 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00 ), // U+0034 (4)
        window_image( 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00 ), // U+0035 (5)
        window_image( 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00 ), // U+0036 (6)
        window_image( 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00 ), // U+0037 (7)
        window_image( 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00 ), // U+0038 (8)
        window_image( 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00 ), // U+0039 (9)
        window_image( 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00 ), // U+003A (:)
        window_image( 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06 ), // U+003B (//)
        window_image( 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00 ), // U+003C (<)
        window_image( 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00 ), // U+003D (=)
        window_image( 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00 ), // U+003E (>)
        window_image( 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00 ), // U+003F (?)
        window_image( 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00 ), // U+0040 (@)
        window_image( 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00 ), // U+0041 (A)
        window_image( 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00 ), // U+0042 (B)
        window_image( 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00 ), // U+0043 (C)
        window_image( 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00 ), // U+0044 (D)
        window_image( 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00 ), // U+0045 (E)
        window_image( 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00 ), // U+0046 (F)
        window_image( 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00 ), // U+0047 (G)
        window_image( 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00 ), // U+0048 (H)
        window_image( 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), // U+0049 (I)
        window_image( 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00 ), // U+004A (J)
        window_image( 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00 ), // U+004B (K)
        window_image( 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00 ), // U+004C (L)
        window_image( 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00 ), // U+004D (M)
        window_image( 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00 ), // U+004E (N)
        window_image( 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00 ), // U+004F (O)
        window_image( 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00 ), // U+0050 (P)
        window_image( 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00 ), // U+0051 (Q)
        window_image( 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00 ), // U+0052 (R)
        window_image( 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00 ), // U+0053 (S)
        window_image( 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), // U+0054 (T)
        window_image( 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00 ), // U+0055 (U)
        window_image( 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 ), // U+0056 (V)
        window_image( 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00 ), // U+0057 (W)
        window_image( 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00 ), // U+0058 (X)
        window_image( 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00 ), // U+0059 (Y)
        window_image( 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00 ), // U+005A (Z)
        window_image( 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00 ), // U+005B ([)
        window_image( 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00 ), // U+005C (\)
        window_image( 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00 ), // U+005D (])
        window_image( 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00 ), // U+005E (^)
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF ), // U+005F (_)
        window_image( 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0060 (`)
        window_image( 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00 ), // U+0061 (a)
        window_image( 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00 ), // U+0062 (b)
        window_image( 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00 ), // U+0063 (c)
        window_image( 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00 ), // U+0064 (d)
        window_image( 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00 ), // U+0065 (e)
        window_image( 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00 ), // U+0066 (f)
        window_image( 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F ), // U+0067 (g)
        window_image( 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00 ), // U+0068 (h)
        window_image( 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), // U+0069 (i)
        window_image( 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E ), // U+006A (j)
        window_image( 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00 ), // U+006B (k)
        window_image( 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), // U+006C (l)
        window_image( 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00 ), // U+006D (m)
        window_image( 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00 ), // U+006E (n)
        window_image( 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00 ), // U+006F (o)
        window_image( 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F ), // U+0070 (p)
        window_image( 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78 ), // U+0071 (q)
        window_image( 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00 ), // U+0072 (r)
        window_image( 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00 ), // U+0073 (s)
        window_image( 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00 ), // U+0074 (t)
        window_image( 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00 ), // U+0075 (u)
        window_image( 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 ), // U+0076 (v)
        window_image( 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00 ), // U+0077 (w)
        window_image( 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00 ), // U+0078 (x)
        window_image( 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F ), // U+0079 (y)
        window_image( 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00 ), // U+007A (z)
        window_image( 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00 ), // U+007B ({)
        window_image( 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 ), // U+007C (|)
        window_image( 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00 ), // U+007D (})
        window_image( 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+007E (~)
        window_image( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 )  // U+007F
    };

public:

    /// Construct a window_image with the given character
    //
    /// Returns a window_image with the corresponding given character
    constexpr const window_image & operator[]( char c ) {
        return images[ c & 0x7F ];      
    } 


};

#endif
 